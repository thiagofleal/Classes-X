/**
*	Classe: Item
*	Classe base: Não há superclasse
*	
*	Atributos:
*		- selecionado: Logico;
*		- selecoes: Inteiro;
*		- cor: Inteiro[];
*		- texto: Texto;
*		- interface: Objeto;
*	
*	construtor(Texto: texto)
*	destrutor()
*	
*	Métodos:
*		alterarInterface(Objeto: interface)
*		cores(Inteiro: corTextoSelec, Inteiro: corFundoSelec, Inteiro: corTexto, Inteiro: corFundo)
*		selecoes()
*		selecionar(Logico: valor)
*		interface()
*		exibir(Inteiro: x, Inteiro: y, Inteiro: tamanho, Texto: prefixo, Texto: sufixo)
*	
*	Descrição: Classe para criação de ítens de menu
*/

Classe: Item
{
	Privado:
		
		Logico: selecionado = falso;
		Inteiro: selecoes;
		Inteiro[]: cor;
		Texto: texto;
		Objeto: interface;
	
	Publico:
		
		/**
		*	Construtor
		*	Parâmetros:
		*		@ texto: Texto - texto do item
		*	Descrição: Inicializa o texto e as cores do item
		*/
		construtor(Texto: texto)
		{
			este.cor = Vetor.inteiro(15, 1, 0, 7);
			este.texto = texto;
		}
		
		/**
		*	Destrutor
		*	Parâmetros:
		*		- Não há parâmetros
		*	Descrição: Libera a memória dinâmica alocada na instância
		*/
		destrutor()
		{
			este.cor.liberar();
		}
		
		/**
		*	Método: alterarInterface
		*	Parâmetros:
		*		@ interface: Objeto - objeto contendo o método "selecionar(Objeto: <parâmetro>)"
		*	Retorno:
		*		Vazio
		*	Descrição: Altera a interface que contém o método a ser executado quando o item for selecionado no menu.
		*				A interface deve conter o método "selecionar" que possui um objeto como parâmetro.
		*/
		alterarInterface(Objeto: interface)
		{
			este.interface = interface;
		}
		
		/**
		*	Método: alterarCores
		*	Parâmetros:
		*		@ corTextoSelec: Inteiro - indica a cor do texto quando selecionado
		*		@ corFundoSelec: Inteiro - indica a cor de fundo quando selecionado
		*		@ corTexto: Inteiro - indica a cor padrão do texto
		*		@ corFundo: Inteiro - indica a cor padrão do fundo
		*	Retorno:
		*		Vazio
		*	Descrição: Altera as cores do item
		*/
		alterarCores(Inteiro: corTextoSelec, Inteiro: corFundoSelec, Inteiro: corTexto, Inteiro: corFundo)
		{
			este.cor[0] = corTextoSelec;
			este.cor[1] = corFundoSelec;
			este.cor[2] = corTexto;
			este.cor[3] = corFundo;
		}
		
		/**
		*	Métodos:
		*		+ selecoes
		*		+ interface
		*	Parâmetros:
		*		Não há parâmetros
		*	Retorno:
		*		Inteiro
		*		Objeto
		*	Descrição: Retorna o valor dos atributos correspondentes
		*/
		selecoes()
		{retornar: este.selecoes;}
		
		interface()
		{retornar: este.interface;}
		
		/**
		*	Método: selecionar
		*	Parâmetros:
		*		@ valor: Logico - indica o se o item estará selecionado
		*	Retorno:
		*		Vazio
		*	Descrição: Seleciona ou desseleciona o item
		*/
		selecionar(Logico: valor)
		{
			se(!este.selecionado && valor)
			{
				este.selecoes++;
			}
			este.selecionado = valor;
		}
		
		/**
		*	Método: exibir
		*	Parâmetros:
		*		@ x: Inteiro - Posição em relação ao eixo x
		*		@ y: Inteiro - Posição em relação ao eixo y
		*		@ tamanho: Inteiro - Largura mínima do item
		*		@ prefixo: Texto - Prefixo a ser acrescentado ao item
		*		@ sufixo: Texto - Sufixo a ser acrescentado ao item
		*	Retorno:
		*		Vazio
		*	Descrição: Exibe o item
		*/
		exibir(Inteiro: x, Inteiro: y, Inteiro: tamanho, Texto: prefixo, Texto: sufixo)
		{
			Texto: texto = prefixo << este.texto << sufixo;
			
			enquanto(texto.tamanho < tamanho)
			{
				texto = texto << " ";
			}
			
			se(este.selecionado)
			{
				Cores(este.cor[0], este.cor[1]);
			}
			senao
			{
				Cores(este.cor[2], este.cor[3]);
			}
			
			Posicionar(x, y);
			Tela.escrever(texto);
		}
}
